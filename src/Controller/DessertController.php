<?php

namespace App\Controller;

use App\Entity\Dessert;
use App\Form\DessertType;
use App\Repository\DessertRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

/**
 * @Route("/")
 */
class DessertController extends AbstractController
{
    /**
     * @Route("/admin/dessert", name="index_dessert", methods={"GET"})
     */
    public function index(DessertRepository $dessertRepository): Response
    {
        return $this->render('dessert/index.html.twig', [
            'desserts' => $dessertRepository->findAll(),
        ]);
    }

    /**
     * @Route("/admin/nouveau/dessert", name="new_dessert", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $dessert = new Dessert();
        $form = $this->createForm(DessertType::class, $dessert);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();

             //Pour le telechargement de fichier et crypté les fichiers télécharger
             $file = $form->get("Photo")->getData(); //Nom de la propriété à exploiter
             //Récupérer le nom du fichier
            $fileName = $this->generateUniqueFileName().'.'. $file->guessExtension();
                //Déplace le nom du fichier dans notre dossier
            $file->move($this->getParameter("uploads"), $fileName);
            $dessert->setPhoto($fileName);

            $entityManager->persist($dessert);
            $entityManager->flush();

            //Message flash pour notification
            $this->addFlash('success', "Le nouveau dessert à été ajouté avec succès !");

            return $this->redirectToRoute('index_dessert');
        }

        return $this->render('dessert/new.html.twig', [
            'dessert' => $dessert,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/admin/detail/dessert/{id}", name="show_dessert", methods={"GET"})
     */
    public function show(Dessert $dessert): Response
    {
        return $this->render('dessert/show.html.twig', [
            'dessert' => $dessert,
        ]);
    }

    /**
     * @Route("/admin/modifier/dessert/{id}", name="edit_dessert", methods={"GET","POST"})
     */
    public function edit(Request $request, Dessert $dessert): Response
    {
    
        $photoActuel = $dessert->getPhoto();

        if(!empty($photoActuel)){

            $photoPath = ($this->getParameter('uploads') . DIRECTORY_SEPARATOR . $dessert->getPhoto());
            //$dessert->setPhoto(new File($photoPath));
        }

        $form = $this->createForm(DessertType::class, $dessert);
        $form->handleRequest($request);

        dump($dessert);
        
        if ($form->isSubmitted() && $form->isValid()) {
            
            $photo = $dessert->getPhoto();
            
            if(!is_null($photo)){
                
                //Pour le telechargement de fichier et crypté les fichiers télécharger
                $file = $form->get("Photo")->getData(); //Nom de la propriété à exploiter
                //Récupérer le nom du fichier
                $fileName = $this->generateUniqueFileName().'.'. $file->guessExtension();
                //Déplace le nom du fichier dans notre dossier
                $file->move($this->getParameter('uploads'), $fileName);
                $dessert->setPhoto($fileName);
            }else{
                $dessert->setPhoto($photoActuel);
            }

            $this->getDoctrine()->getManager()->persist($dessert);
            $this->getDoctrine()->getManager()->flush();
            
            //Message flash pour notification
            $this->addFlash('success', "Le dessert à été modifié avec succès !");

            return $this->redirectToRoute('index_dessert', [
                'id' => $dessert->getId(),
            ]);
        }

        return $this->render('dessert/edit.html.twig', [
            'dessert' => $dessert,
            'form' => $form->createView(),
            'photoActuel'=>$photoActuel
        ]);
    }

    // Hash du nom de l'image par sécurité
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/admin/supprimer/dessert/{id}", name="delete_dessert", methods={"DELETE"})
     */
    public function delete(Request $request, Dessert $dessert): Response
    {
        if ($this->isCsrfTokenValid('delete'.$dessert->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($dessert);
            $entityManager->flush();
        }

        //Message flash pour notification
        $this->addFlash('suppression', "Le dessert à été supprimé avec succès !");

        return $this->redirectToRoute('index_dessert');
    }
}
